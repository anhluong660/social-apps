<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.swordfish.social.repository.PostMapper">

    <resultMap id="PostModel" type="com.swordfish.social.model.PostModel">
        <id column="Id" jdbcType="BIGINT" property="id" />
        <result column="AuthorId" jdbcType="BIGINT" property="authorId" />
        <result column="CreateTime" jdbcType="TIMESTAMP" property="createTime" />
        <result column="PostType" jdbcType="VARCHAR" property="postType"/>
        <result column="Content" jdbcType="VARCHAR" property="content" />
        <result column="MediaLink" jdbcType="VARCHAR" property="mediaLink" />
        <result column="IsLiked" jdbcType="BOOLEAN" property="isLiked"/>
        <result column="LikeCount" jdbcType="INTEGER" property="likeCount"/>
        <result column="CommentCount" jdbcType="INTEGER" property="commentCount"/>
    </resultMap>

    <insert id="insertNewPost" parameterType="PostModel">
        INSERT INTO Post (AuthorId, CreateTime, PostType, Content, MediaLink)
        VALUES (#{authorId}, #{createTime}, #{postType}, #{content}, #{mediaLink})
    </insert>

    <select id="findPostByAuthorId" resultMap="PostModel">
        SELECT
            Post_Likes.*,
            COUNT(comments.Id) AS CommentCount
        FROM (
            SELECT
                post.*,
                COUNT(likes.Id) AS LikeCount,
                (CASE WHEN SUM(likes.UserId = #{authorId}) > 0 THEN 1 ELSE 0 END) AS IsLiked
            FROM
                post
            LEFT JOIN likes ON post.Id = likes.PostId
            WHERE post.AuthorId = #{authorId}
            GROUP BY post.Id
        ) AS Post_Likes
        LEFT JOIN comments ON Post_Likes.Id = comments.PostId
        GROUP BY Post_Likes.Id
    </select>

    <select id="existPost" resultType="Integer">
        SELECT COUNT(*) FROM Post WHERE id = #{postId}
    </select>

    <select id="findPostById" resultMap="PostModel">
        SELECT
            Post_Likes.*,
            COUNT(comments.Id) AS CommentCount
        FROM (
            SELECT
                post.*,
                COUNT(likes.Id) AS LikeCount,
                (CASE WHEN SUM(likes.UserId = #{userId}) > 0 THEN 1 ELSE 0 END) AS IsLiked
            FROM
                post
            LEFT JOIN likes ON post.Id = likes.PostId
            WHERE post.Id = #{postId}
            GROUP BY post.Id
        ) AS Post_Likes
        LEFT JOIN comments ON Post_Likes.Id = comments.PostId
        GROUP BY Post_Likes.Id
    </select>

    <select id="findPostByAuthorIdList" resultMap="PostModel">
        SELECT
            Post_Likes.*,
            COUNT(comments.Id) AS CommentCount
        FROM (
            SELECT
                post.*,
                COUNT(likes.Id) AS LikeCount,
                (CASE WHEN SUM(likes.UserId = #{userId}) > 0 THEN 1 ELSE 0 END) AS IsLiked
            FROM
                post
            LEFT JOIN likes ON post.Id = likes.PostId
            WHERE post.AuthorId IN
                <foreach item="id" index="index" collection="authorIdList"
                         open="(" separator="," close=")">
                    #{id}
                </foreach>
                AND post.PostType = #{postType}
            GROUP BY post.Id
        ) AS Post_Likes
        LEFT JOIN comments ON Post_Likes.Id = comments.PostId
        GROUP BY Post_Likes.Id
    </select>
</mapper>